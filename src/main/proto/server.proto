syntax = "proto3";

package discogsserver;

import "godiscogs.proto";

message ReleaseMetadata {
	// The date the release was added
	int64 date_added = 1;

	// The date the release was last refreshed
	int64 date_refreshed = 2;

        //The path to the file on iTunes if available
        string file_path = 3;
        
        //The cost of the release in pence
        int32 cost = 4;
}

message Empty {}

message FolderList {
        repeated godiscogs.Folder folders = 1;
}

message ReleaseList {
        repeated godiscogs.Release releases = 1;
}

message ReleaseMove {
        godiscogs.Release release = 1;
        int32 new_folder_id = 2;
}

message MetadataUpdate {
        godiscogs.Release release = 1;
        ReleaseMetadata update = 2;
}

message Want {
	int32 release_id = 1;
	bool valued = 2;
	bool wanted = 3;
}

message Wantlist {
	repeated Want want = 1;
}

message SpendRequest {
	int32 month = 1;
	int32 year = 2;
	int64 lower = 3;
	int64 upper = 4;
}

message SpendResponse {
	int32 total_spend = 1;
	repeated MetadataUpdate spends = 2;
}

message SearchRequest {
	string query = 1;
}

service DiscogsService {
        rpc GetCollection (Empty) returns (ReleaseList) {};

        rpc GetReleasesInFolder (FolderList) returns (ReleaseList) {};

        rpc MoveToFolder (ReleaseMove) returns (Empty) {};

        rpc AddToFolder(ReleaseMove) returns (Empty) {};

        rpc UpdateMetadata(MetadataUpdate) returns (ReleaseMetadata) {};

        rpc GetMetadata(godiscogs.Release) returns (ReleaseMetadata) {};
        
        rpc UpdateRating(godiscogs.Release) returns (Empty) {};

				rpc GetSingleRelease(godiscogs.Release) returns (godiscogs.Release) {};

				rpc GetWantlist(Empty) returns (Wantlist) {};

				rpc CollapseWantlist(Empty) returns (Wantlist) {};

				rpc RebuildWantlist(Empty) returns (Wantlist) {};

				rpc GetSpend(SpendRequest) returns (SpendResponse) {};

				rpc EditWant(Want) returns (Want) {};

				rpc DeleteWant(Want) returns (Wantlist) {};

				rpc AddWant(Want) returns (Empty) {};

				rpc SyncWithDiscogs(Empty) returns (Empty) {};

				rpc DeleteInstance(godiscogs.Release) returns (Empty) {};

				rpc Sell(godiscogs.Release) returns (Empty) {};

				rpc GetIncompleteReleases(Empty) returns (ReleaseList) {};
}

